#!/usr/bin/env python3
# demo_autonomous_agents.py ‚Äî –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤

from memory_core import MemoryCore
from agents import (
    create_agent_from_plan,
    create_content_agent,
    create_channel_manager_agent,
    get_agents_status
)


def demo_create_agents():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤"""

    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
    print("=" * 50)

    memory = MemoryCore()

    # 1. RSS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≥–µ–Ω—Ç
    print("\n1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ RSS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–≥–µ–Ω—Ç–∞...")
    rss_agent_id = create_agent_from_plan(
        memory=memory,
        rss_url="https://dtf.ru/rss",
        chat_id="-1002669388680",
        style="–≤ —Å—Ç–∏–ª–µ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ –¥–æ 18 –ª–µ—Ç",
        use_n8n=False  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    )
    print(f"‚úÖ RSS –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {rss_agent_id}")

    # 2. –ê–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    content_agent_id = create_content_agent(
        memory=memory,
        template_id="technology_template",
        chat_id="-1002669388680",
        topics=["–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–±–ª–æ–∫—á–µ–π–Ω", "–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –∫–æ–º–ø—å—é—Ç–µ—Ä—ã"],
        schedule="every 6 hours"
    )
    print(f"‚úÖ –ê–≥–µ–Ω—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω: {content_agent_id}")

    # 3. –ê–≥–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º...")
    manager_agent_id = create_channel_manager_agent(
        memory=memory,
        chat_id="-1002669388680",
        actions=["analytics", "engagement", "moderation"]
    )
    print(f"‚úÖ –ê–≥–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω: {manager_agent_id}")

    # 4. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
    print("\nüìä –°—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤:")
    print("-" * 30)
    status = get_agents_status(memory)

    print(f"–í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {status['total_agents']}")
    print(f"–ê–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö: {status['autonomous_count']}")
    print(f"N8N: {status['n8n_count']}")
    print(
        f"–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'üü¢ –†–ê–ë–û–¢–ê–ï–¢' if status['scheduler_running'] else 'üî¥ –û–°–¢–ê–ù–û–í–õ–ï–ù'}")

    if status['autonomous_agents']:
        print("\nü§ñ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:")
        for agent in status['autonomous_agents']:
            status_icon = "üü¢" if agent.get('is_active') else "üî¥"
            print(f"  {status_icon} {agent['name']} ({agent['type']})")
            print(f"     –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {agent.get('success_rate', 0):.1f}%")
            print(f"     –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {agent.get('last_run', '–ù–∏–∫–æ–≥–¥–∞')}")

    print("\n‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üí° –ê–≥–µ–Ω—Ç—ã –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é")
    print("üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É 'agents' –≤ main.py –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")


if __name__ == "__main__":
    demo_create_agents()
