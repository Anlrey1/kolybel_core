# intuition_advanced.py ‚Äî –ì–æ–ª–æ—Å –ò–Ω—Ç—É–∏—Ü–∏–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º "–ø–æ–ª–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ")
import logging
from datetime import datetime
from typing import List, Dict, Optional

import numpy as np

from memory_core import MemoryCore

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

class IntuitionEngine:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∏–Ω—Ç—É–∏—Ü–∏—è:
      - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –æ—à–∏–±–∫–∏ –ø–æ –ø–æ—Ö–æ–∂–∏–º –∑–∞–ø—Ä–æ—Å–∞–º
      - –∏—â–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø–æ—Ö–æ–∂–∏–µ –∫–µ–π—Å—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ –Ω–∏—Ö
      - –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ü–µ–ª—è–º–∏ (–Ω–∏–∑–∫–∞—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å)
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –û–î–ò–ù embedder –∏–∑ MemoryCore (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏).
    """
    def __init__(self, threshold_days: int = 7, conflict_similarity_threshold: float = 0.40):
        self.memory = MemoryCore()
        self.embedder = self.memory.embedder  # –Ω–µ –≥—Ä—É–∑–∏–º –º–æ–¥–µ–ª—å –≤—Ç–æ—Ä–æ–π —Ä–∞–∑
        self.threshold_days = threshold_days
        self.conflict_similarity_threshold = conflict_similarity_threshold
        self.warning_markers = ["–æ—à–∏–±–∫–∞", "–Ω–µ —É–¥–∞–ª–æ—Å—å", "—Å–±–æ–π", "–ø–∞–¥–µ–Ω–∏–µ"]

    # === –ü—É–±–ª–∏—á–Ω—ã–π API ===
    def detect_intuition(self, user_input: str) -> Optional[str]:
        try:
            hints: List[str] = []

            recent_err = self._find_recent_errors(user_input)
            if recent_err:
                hints.append("‚ùó –ò–Ω—Ç—É–∏—Ü–∏—è: —Å –ø–æ—Ö–æ–∂–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É –∏–ª–∏ —à–∞–≥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")

            old_sim = self._find_old_similar(user_input)
            if old_sim:
                hints.append("üí≠ –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ —É–∂–µ –ø–æ–¥–Ω–∏–º–∞–ª–æ—Å—å —Ä–∞–Ω—å—à–µ. –í–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –Ω–µ–≤–∏–¥–∏–º—ã–µ —Ä–∏—Å–∫–∏ –∏–ª–∏ –∑–∞–±—ã—Ç—ã–µ –¥–µ—Ç–∞–ª–∏.")

            conflicts = self._find_conflicting_goals(user_input)
            if conflicts:
                hints.append("‚ö†Ô∏è –í–æ–∑–º–æ–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ü–µ–ª—è–º–∏. –£—Ç–æ—á–Ω–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –∑–∞–¥–∞—á—É.")

            return "\\n".join(hints) if hints else None
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ò–Ω—Ç—É–∏—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
            return None

    # === –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã ===
    def _find_recent_errors(self, query: str) -> List[Dict]:
        """–ò—â–µ–º –≤ –ø–∞–º—è—Ç–∏ –æ—Ç–≤–µ—Ç—ã/—Å–æ–±—ã—Ç–∏—è, –≥–¥–µ –±—ã–ª–∏ —è–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø–æ –ø–æ—Ö–æ–∂–µ–π —Ç–µ–º–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ~N —à—Ç—É–∫)"""
        results = self.memory.get_similar(query, n_results=6, filter_type="response")
        out = []
        for r in results:
            text = (r.get("content") or "").lower()
            if any(mark in text for mark in self.warning_markers):
                out.append(r)
        return out

    def _find_old_similar(self, query: str) -> List[Dict]:
        """–ù–∞—Ö–æ–¥–∏–º –ø–æ—Ö–æ–∂–∏–µ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ threshold_days (–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø—ã—Ç–µ)"""
        matches = self.memory.get_similar(query, n_results=6)
        old = []
        for m in matches:
            ts = None
            meta = m.get("metadata") or {}
            if isinstance(meta, dict):
                ts_str = meta.get("timestamp")
                if ts_str:
                    try:
                        ts = datetime.fromisoformat(ts_str)
                    except Exception:
                        ts = None
            if ts:
                if (datetime.now() - ts).days > self.threshold_days:
                    old.append(m)
        return old

    def _find_conflicting_goals(self, query: str) -> List[Dict]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ü–µ–ª–∏ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ñ–ª–∏–∫—Ç —Å –∑–∞–ø—Ä–æ—Å–æ–º"""
        goals = self.memory.get_similar("goal", filter_type="goal", n_results=8)
        if not goals:
            return []

        q_vec = self.embedder.encode(query)
        conflicts = []
        for g in goals:
            gtxt = g.get("content") or ""
            g_vec = self.embedder.encode(gtxt)
            sim = self._cosine_sim(q_vec, g_vec)
            if sim < self.conflict_similarity_threshold:
                conflicts.append({"goal": gtxt, "similarity": float(sim)})
        return conflicts

    @staticmethod
    def _cosine_sim(a, b) -> float:
        a = np.asarray(a, dtype=float)
        b = np.asarray(b, dtype=float)
        denom = (np.linalg.norm(a) * np.linalg.norm(b)) or 1e-8
        return float(np.dot(a, b) / denom)
