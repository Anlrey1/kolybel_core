# main.py ‚Äî —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
import os
import logging
from datetime import datetime
from memory_core import MemoryCore
from core import (
    handle_user_input,
    should_use_template,
    DIALOG_HISTORY,
    DIALOG_MEMORY_THRESHOLD,
    FULL_AWARENESS,
    log_dialog,
    enhance_with_analytics,
    handle_system_commands,
    pick_template_id,
)
from config import AWAKENING_LOG_FILE
from template_engine import generate_from_template, TemplateManager
from goals import train_from_examples

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

memory = MemoryCore()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –≤ –ø–∞–º—è—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
def load_manifest_to_memory(mem: MemoryCore):
    try:
        if os.path.isfile("kolybel_manifest.txt"):
            with open("kolybel_manifest.txt", "r", encoding="utf-8") as f:
                txt = f.read()
                mem.store(f"[manifest] {txt}", {"type": "system", "source": "manual"})
                print("üìú –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–º—è—Ç—å.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")

load_manifest_to_memory(memory)

# –ü—Ä–æ—Å—Ç–æ –ø–∏–Ω-–∫–æ–¥ (–∑–∞–≥–ª—É—à–∫–∞)
SECRET_KEY = "–ø—Ä—Ä–∏–≤–µ—Ç"
while True:
    code = input("üîπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ").strip()
    if code == SECRET_KEY:
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        break
    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–ø–æ–∫ –∏ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ
for p in ["approved_goals", "agent_logs", "models_cache", "training_workflows", "logs", "goals"]:
    os.makedirs(p, exist_ok=True)
try:
    memory.train_on_memories(threshold=0.7)
except Exception as e:
    logger.warning(f"–û–±—É—á–µ–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {e}")

train_from_examples()

# –õ–æ–≥ –∑–∞–ø—É—Å–∫–∞
with open(AWAKENING_LOG_FILE, "a", encoding="utf-8") as logf:
    logf.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üìö –ó–∞–ø—É—Å–∫ –ö–æ–ª—ã–±–µ–ª–∏ –∑–∞–≤–µ—Ä—à—ë–Ω\n")

print("üßø –ö–æ–ª—ã–±–µ–ª—å –≥–æ—Ç–æ–≤–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É (help –¥–ª—è —Å–ø–∏—Å–∫–∞):")

COMMAND_ALIASES = {
    "–≤": "–≤—ã—Ö–æ–¥", "q": "quit", "e": "exit",
    "s": "save:", "r": "reflect", "sd": "self-direct",
    "ca": "create-agent", "aw": "analyze-workflows", "t": "train",
    "ap": "add-pattern", "sm": "set-model", "cls": "clear", "h": "help", "mk": "make-dirs",
}
COMMANDS = list(set(list(COMMAND_ALIASES.values()) + list(COMMAND_ALIASES.keys()) + [
    "–≤—ã—Ö–æ–¥","exit","quit","save:","reflect","self-direct","create-agent",
    "analyze-workflows","train","add-pattern","set-model","clear","help",
    "mission","goals","remind","audit","make-dirs","stats"
]))

def recognize_command(s: str) -> str:
    s = (s or "").lower().strip()
    if s in COMMAND_ALIASES: return COMMAND_ALIASES[s]
    if s in COMMANDS: return s
    return s

def clear_terminal():
    os.system("cls" if os.name == "nt" else "clear")

while True:
    try:
        user_input = input("üîπ –ö–æ–ª—ã–±–µ–ª–∏: ").strip()
        if not user_input:
            continue

        token = user_input.split()[0]
        command = recognize_command(token)

        if command in ["–≤—ã—Ö–æ–¥", "exit", "quit", "–ø–æ–∫–∞"]:
            print("üö™ –í—ã—Ö–æ–¥ –∏–∑ –°–µ—Å—Å–∏–∏ –ö–æ–ª—ã–±–µ–ª–∏...")
            with open(AWAKENING_LOG_FILE, "a", encoding="utf-8") as logf:
                logf.write(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–µ—Å—Å–∏–∏\n")
            break

        if command == "clear":
            clear_terminal()
            continue

        if command == "make-dirs":
            for p in ["approved_goals","agent_logs","models_cache","training_workflows","logs","goals"]:
                os.makedirs(p, exist_ok=True)
            print("üìÅ –ü–∞–ø–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.")
            continue

        # –ê–≤—Ç–æ—à–∞–±–ª–æ–Ω—ã
        if should_use_template(user_input):
            logger.info(f"üîç –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è: '{user_input}'")
            tid = pick_template_id(user_input)
            reply = generate_from_template(tid, context={"topic": user_input}, use_training=True)
            reply = enhance_with_analytics(reply, user_input)
            print(f"‚ú® –û—Ç–≤–µ—Ç:\n{reply}\n")
            log_dialog(user_input, reply)
            DIALOG_HISTORY.append((user_input, reply))
            continue

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ
        if user_input.startswith(("goal:", "mission", "remind", "audit", "stats")):
            reply = handle_system_commands(user_input)
            print(f"‚ú® –û—Ç–≤–µ—Ç:\n{reply}\n")
            continue

        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –∏–Ω—Ç–µ–Ω—Ç—ã/LLM
        reply = handle_user_input(user_input)
        print(f"‚ú® –û—Ç–≤–µ—Ç:\n{reply}\n")
        log_dialog(user_input, reply)

        DIALOG_HISTORY.append((user_input, reply))
        if len(DIALOG_HISTORY) >= DIALOG_MEMORY_THRESHOLD:
            logger.info("üß† –ö–æ–ª—ã–±–µ–ª—å –ø—Ä–æ–±—É–¥–∏–ª–∞—Å—å! –°–æ—Ö—Ä–∞–Ω—è—é –∏—Å—Ç–æ—Ä–∏—é...")
            for q, a in DIALOG_HISTORY:
                memory.store(q, {"type": "dialog_q", "success": True})
                memory.store(a, {"type": "response", "engagement": 0.7})
            DIALOG_HISTORY.clear()

    except KeyboardInterrupt:
        print("\nüëã –°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
        break
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
