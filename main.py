# main.py ‚Äî —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
import os
import logging
from datetime import datetime
from memory_core import MemoryCore
from core import (
    handle_user_input,
    should_use_template,
    DIALOG_HISTORY,
    DIALOG_MEMORY_THRESHOLD,
    FULL_AWARENESS,
    log_dialog,
    enhance_with_analytics,
    handle_system_commands,
    pick_template_id,
)
from config import AWAKENING_LOG_FILE
from template_engine import generate_from_template, TemplateManager
from goals import train_from_examples
from agents import start_autonomous_system, stop_autonomous_system, get_agents_status

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

memory = MemoryCore()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –≤ –ø–∞–º—è—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å)


def load_manifest_to_memory(mem: MemoryCore):
    try:
        if os.path.isfile("kolybel_manifest.txt"):
            with open("kolybel_manifest.txt", "r", encoding="utf-8") as f:
                txt = f.read()
                mem.store(f"[manifest] {txt}", {
                          "type": "system", "source": "manual"})
                print("üìú –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–º—è—Ç—å.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")


load_manifest_to_memory(memory)

# –ü—Ä–æ—Å—Ç–æ –ø–∏–Ω-–∫–æ–¥ (–∑–∞–≥–ª—É—à–∫–∞)
SECRET_KEY = "–ø—Ä—Ä–∏–≤–µ—Ç"
while True:
    code = input("üîπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ").strip()
    if code == SECRET_KEY:
        print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
        break
    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞–ø–æ–∫ –∏ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ
for p in ["approved_goals", "agent_logs", "models_cache", "training_workflows", "logs", "goals", "autonomous_agents"]:
    os.makedirs(p, exist_ok=True)

# –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤
print("üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤...")
start_autonomous_system(memory)

try:
    train_from_examples()
    print("üéì –ê–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
except Exception as e:
    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è: {e}")

# –ö–æ–º–∞–Ω–¥—ã


def recognize_command(token: str) -> str:
    commands = {
        "–≤—ã—Ö–æ–¥": "–≤—ã—Ö–æ–¥", "exit": "–≤—ã—Ö–æ–¥", "quit": "–≤—ã—Ö–æ–¥", "–ø–æ–∫–∞": "–≤—ã—Ö–æ–¥",
        "clear": "clear", "cls": "clear", "–æ—á–∏—Å—Ç–∏—Ç—å": "clear",
        "make-dirs": "make-dirs", "—Å–æ–∑–¥–∞—Ç—å-–ø–∞–ø–∫–∏": "make-dirs",
        "agents": "agents", "–∞–≥–µ–Ω—Ç—ã": "agents",
        "start-agents": "start-agents", "–∑–∞–ø—É—Å—Ç–∏—Ç—å-–∞–≥–µ–Ω—Ç–æ–≤": "start-agents",
        "stop-agents": "stop-agents", "–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å-–∞–≥–µ–Ω—Ç–æ–≤": "stop-agents",
    }
    return commands.get(token.lower(), "unknown")


def format_response(s: str) -> str:
    if not s:
        return "ü§î –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç."
    return s


def clear_terminal():
    os.system("cls" if os.name == "nt" else "clear")


print("üåü –ö–æ–ª—ã–±–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
print("   ‚Ä¢ agents - —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤")
print("   ‚Ä¢ start-agents - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
print("   ‚Ä¢ stop-agents - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
print("   ‚Ä¢ goal: <—Ç–µ–∫—Å—Ç> - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª—å")
print("   ‚Ä¢ remind - –Ω–∞–ø–æ–º–Ω–∏—Ç—å —Ü–µ–ª–∏")
print("   ‚Ä¢ audit - –∞—É–¥–∏—Ç –∞–≥–µ–Ω—Ç–æ–≤")
print("   ‚Ä¢ stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
print("   ‚Ä¢ clear - –æ—á–∏—Å—Ç–∏—Ç—å —ç–∫—Ä–∞–Ω")
print("   ‚Ä¢ exit - –≤—ã—Ö–æ–¥")
print()

while True:
    try:
        user_input = input("üîπ –ö–æ–ª—ã–±–µ–ª–∏: ").strip()
        if not user_input:
            continue

        token = user_input.split()[0]
        command = recognize_command(token)

        if command in ["–≤—ã—Ö–æ–¥", "exit", "quit", "–ø–æ–∫–∞"]:
            print("üö™ –í—ã—Ö–æ–¥ –∏–∑ –°–µ—Å—Å–∏–∏ –ö–æ–ª—ã–±–µ–ª–∏...")
            print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
            stop_autonomous_system(memory)
            with open(AWAKENING_LOG_FILE, "a", encoding="utf-8") as logf:
                logf.write(
                    f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] üö™ –í—ã—Ö–æ–¥ –∏–∑ —Å–µ—Å—Å–∏–∏\n")
            break

        if command == "clear":
            clear_terminal()
            continue

        if command == "make-dirs":
            for p in ["approved_goals", "agent_logs", "models_cache", "training_workflows", "logs", "goals", "autonomous_agents"]:
                os.makedirs(p, exist_ok=True)
            print("üìÅ –ü–∞–ø–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã.")
            continue

        if command == "agents":
            status = get_agents_status(memory)
            print("ü§ñ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: {status['total_agents']}")
            print(f"   ‚Ä¢ –ê–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö: {status['autonomous_count']}")
            print(f"   ‚Ä¢ N8N: {status['n8n_count']}")
            print(
                f"   ‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫: {'üü¢ –†–ê–ë–û–¢–ê–ï–¢' if status['scheduler_running'] else 'üî¥ –û–°–¢–ê–ù–û–í–õ–ï–ù'}")

            if status['autonomous_agents']:
                print("\nüìã –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã:")
                for agent in status['autonomous_agents']:
                    status_icon = "üü¢" if agent.get('is_active') else "üî¥"
                    success_rate = agent.get('success_rate', 0)
                    print(
                        f"   {status_icon} {agent['name']} ({agent['type']}) - {success_rate:.1f}% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å")
            continue

        if command == "start-agents":
            start_autonomous_system(memory)
            print("üöÄ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
            continue

        if command == "stop-agents":
            stop_autonomous_system(memory)
            print("‚èπÔ∏è –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            continue

        # –ê–≤—Ç–æ—à–∞–±–ª–æ–Ω—ã
        if should_use_template(user_input):
            logger.info(f"üîç –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∞–±–ª–æ–Ω–∞ –¥–ª—è: '{user_input}'")
            tid = pick_template_id(user_input)
            reply = generate_from_template(
                tid, context={"topic": user_input}, use_training=True)
            reply = enhance_with_analytics(reply, user_input)
            print(f"‚ú® –û—Ç–≤–µ—Ç:\n{reply}\n")
            log_dialog(user_input, reply)
            DIALOG_HISTORY.append((user_input, reply))
            continue

        # –°–∏—Å—Ç–µ–º–Ω—ã–µ
        if user_input.startswith(("goal:", "mission", "remind", "audit", "stats")):
            reply = handle_system_commands(user_input)
            print(f"‚ú® –û—Ç–≤–µ—Ç:\n{reply}\n")
            continue

        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –∏–Ω—Ç–µ–Ω—Ç—ã/LLM
        reply = handle_user_input(user_input)
        print(f"‚ú® –û—Ç–≤–µ—Ç:\n{reply}\n")
        log_dialog(user_input, reply)

        DIALOG_HISTORY.append((user_input, reply))
        if len(DIALOG_HISTORY) >= DIALOG_MEMORY_THRESHOLD:
            logger.info("üß† –ö–æ–ª—ã–±–µ–ª—å –ø—Ä–æ–±—É–¥–∏–ª–∞—Å—å! –°–æ—Ö—Ä–∞–Ω—è—é –∏—Å—Ç–æ—Ä–∏—é...")
            for q, a in DIALOG_HISTORY:
                memory.store(q, {"type": "dialog_q", "success": True})
                memory.store(a, {"type": "response", "engagement": 0.7})
            DIALOG_HISTORY.clear()

    except KeyboardInterrupt:
        print("\nüëã –°–µ—Å—Å–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é.")
        print("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        stop_autonomous_system(memory)
        break
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
        logger.exception("–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:")
