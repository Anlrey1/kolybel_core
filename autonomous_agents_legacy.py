# autonomous_agents_legacy.py ‚Äî —É—Å—Ç–∞—Ä–µ–≤—à–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏ –±—É–¥–µ—Ç –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –≤—ã–≤–µ–¥–µ–Ω –∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

import os
import json
import time
import threading
import schedule
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable
from dataclasses import dataclass, asdict
from abc import ABC, abstractmethod

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from memory_core import MemoryCore
except ImportError:
    class MemoryCore:
        def store(self, content, metadata=None):
            print(f"[MEMORY] {content}")

try:
    from llm import ask_llm_with_context
except ImportError:
    def ask_llm_with_context(prompt, model="mistral"):
        return f"[LLM STUB] Generated response for: {prompt[:50]}..."

try:
    from template_engine import generate_from_template
except ImportError:
    def generate_from_template(template_id, context):
        return f"[TEMPLATE STUB] Generated content from {template_id}"

try:
    from telegram_bridge import send_telegram_message
except ImportError:
    def send_telegram_message(chat_id, message):
        print(f"[TELEGRAM STUB] Send to {chat_id}: {message[:100]}...")
        return True

logger = logging.getLogger(__name__)

@dataclass
class AgentTask:
    """–ë–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è)"""
    id: str
    name: str
    description: str
    schedule_pattern: str
    task_type: str
    config: Dict
    is_active: bool = True
    created_at: str = ""
    last_run: str = ""
    success_count: int = 0
    error_count: int = 0

class BaseAgent(ABC):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π)"""
    
    def __init__(self, task: AgentTask, memory: MemoryCore):
        self.task = task
        self.memory = memory
        self.logger = logging.getLogger(f"LegacyAgent.{task.name}")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± —É—Å—Ç–∞—Ä–µ–≤—à–µ–º API
        self.logger.warning(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π API –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è {task.name}. "
                          "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–∏–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É agents_v2.py")
    
    @abstractmethod
    def execute(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É –∞–≥–µ–Ω—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ"""
        pass
    
    def log_execution(self, success: bool, message: str = ""):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
        timestamp = datetime.now().isoformat()
        status = "SUCCESS" if success else "ERROR"
        
        log_entry = {
            "agent_id": self.task.id,
            "timestamp": timestamp,
            "status": status,
            "message": message,
            "legacy_agent": True
        }
        
        self.memory.store(
            f"[legacy_agent_log] {self.task.name}: {status} - {message}",
            {"type": "legacy_agent_execution", "agent_id": self.task.id, "success": success}
        )
        
        if success:
            self.task.success_count += 1
        else:
            self.task.error_count += 1
        
        self.task.last_run = timestamp
        
        os.makedirs("agent_logs", exist_ok=True)
        log_file = f"agent_logs/legacy_{self.task.id}_{datetime.now().strftime('%Y%m')}.log"
        with open(log_file, "a", encoding="utf-8") as f:
            f.write(f"{json.dumps(log_entry, ensure_ascii=False)}\n")

class RSSMonitorAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ RSS –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π)"""
    
    def execute(self) -> bool:
        try:
            import feedparser
            
            rss_url = self.task.config.get("rss_url", "")
            chat_id = self.task.config.get("chat_id", "")
            style = self.task.config.get("style", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å")
            max_posts = self.task.config.get("max_posts", 3)
            
            if not rss_url or not chat_id:
                self.log_execution(False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º RSS
            feed = feedparser.parse(rss_url)
            if not feed.entries:
                self.log_execution(False, "RSS –ª–µ–Ω—Ç–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                return False
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç—ã
            processed_posts = 0
            for entry in feed.entries[:max_posts]:
                try:
                    title = entry.get('title', '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                    link = entry.get('link', '')
                    description = entry.get('description', '')
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ LLM
                    prompt = f"–ü–µ—Ä–µ–ø–∏—à–∏ –Ω–æ–≤–æ—Å—Ç—å –≤ —Å—Ç–∏–ª–µ '{style}':\n\n–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n–°—Å—ã–ª–∫–∞: {link}"
                    generated_content = ask_llm_with_context(prompt)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
                    message = f"{generated_content}\n\nüîó {link}"
                    send_telegram_message(chat_id, message)
                    
                    processed_posts += 1
                    time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å—Ç–∞–º–∏
                    
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞: {e}")
                    continue
            
            self.log_execution(True, f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_posts} –ø–æ—Å—Ç–æ–≤")
            return True
            
        except ImportError:
            self.log_execution(False, "–ú–æ–¥—É–ª—å feedparser –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return False
        except Exception as e:
            self.log_execution(False, f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}")
            return False

class ContentGeneratorAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—É—Å—Ç–∞—Ä–µ–≤—à–∏–π)"""
    
    def execute(self) -> bool:
        try:
            template_id = self.task.config.get("template_id", "")
            chat_id = self.task.config.get("chat_id", "")
            topics = self.task.config.get("topics", [])
            
            if not template_id or not chat_id:
                self.log_execution(False, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
                return False
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–µ–º—É
            import random
            topic = random.choice(topics) if topics else "–æ–±—â–∞—è —Ç–µ–º–∞"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            context = {"topic": topic, "timestamp": datetime.now().isoformat()}
            content = generate_from_template(template_id, context)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            send_telegram_message(chat_id, content)
            
            self.log_execution(True, f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ —Ç–µ–º–µ: {topic}")
            return True
            
        except Exception as e:
            self.log_execution(False, f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {str(e)}")
            return False

class LegacyAgentManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self, memory: MemoryCore = None):
        self.memory = memory or MemoryCore()
        self.agents: Dict[str, BaseAgent] = {}
        self.scheduler_thread = None
        self.scheduler_running = False
        
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π LegacyAgentManager. "
                      "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AgentManager –∏–∑ agents_v2.py")
    
    def add_agent(self, agent: BaseAgent):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∞–≥–µ–Ω—Ç–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä"""
        self.agents[agent.task.id] = agent
        self._schedule_agent(agent)
        logger.info(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∞–≥–µ–Ω—Ç {agent.task.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä")
    
    def _schedule_agent(self, agent: BaseAgent):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        pattern = agent.task.schedule_pattern
        
        # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        if pattern == "0 9,15,20 * * *":
            schedule.every().day.at("09:00").do(self._execute_agent, agent.task.id)
            schedule.every().day.at("15:00").do(self._execute_agent, agent.task.id)
            schedule.every().day.at("20:00").do(self._execute_agent, agent.task.id)
        elif "every" in pattern and "hours" in pattern:
            hours = int(pattern.split()[1])
            schedule.every(hours).hours.do(self._execute_agent, agent.task.id)
    
    def _execute_agent(self, agent_id: str):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≥–µ–Ω—Ç–∞"""
        if agent_id in self.agents:
            agent = self.agents[agent_id]
            try:
                agent.execute()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞ {agent_id}: {e}")
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if self.scheduler_running:
            return
        
        self.scheduler_running = True
        
        def scheduler_loop():
            while self.scheduler_running:
                try:
                    schedule.run_pending()
                    time.sleep(1)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        
        self.scheduler_thread = threading.Thread(target=scheduler_loop, daemon=True)
        self.scheduler_thread.start()
        
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        self.scheduler_running = False
        if self.scheduler_thread:
            self.scheduler_thread.join(timeout=5)
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
_legacy_manager = None

def get_agent_manager() -> LegacyAgentManager:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    global _legacy_manager
    if _legacy_manager is None:
        _legacy_manager = LegacyAgentManager()
        logger.warning("–°–æ–∑–¥–∞–Ω —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤. "
                      "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ get_agent_manager() –∏–∑ agents_v2.py –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    return _legacy_manager

def create_autonomous_agent_from_plan(
    memory: MemoryCore,
    agent_type: str,
    name: str,
    rss_url: str = "",
    chat_id: str = "",
    style: str = "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å",
    schedule: str = "0 9,15,20 * * *",
    **kwargs
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    
    –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AgentManager –∏–∑ agents_v2.py
    """
    logger.warning("–§—É–Ω–∫—Ü–∏—è create_autonomous_agent_from_plan —É—Å—Ç–∞—Ä–µ–ª–∞. "
                  "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ create_rss_agent() –∏–∑ agents_v2.AgentManager")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    task = AgentTask(
        id=f"{agent_type}_{int(time.time())}",
        name=name,
        description=f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π {agent_type} –∞–≥–µ–Ω—Ç",
        schedule_pattern=schedule,
        task_type=agent_type,
        config={
            "rss_url": rss_url,
            "chat_id": chat_id,
            "style": style,
            **kwargs
        },
        created_at=datetime.now().isoformat()
    )
    
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    if agent_type == "rss_monitor":
        agent = RSSMonitorAgent(task, memory)
    elif agent_type == "content_generator":
        agent = ContentGeneratorAgent(task, memory)
    else:
        raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞: {agent_type}")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = get_agent_manager()
    manager.add_agent(agent)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω
    if not manager.scheduler_running:
        manager.start_scheduler()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    os.makedirs("approved_goals", exist_ok=True)
    config_file = f"approved_goals/legacy_agent_{task.id}.json"
    
    with open(config_file, "w", encoding="utf-8") as f:
        json.dump(asdict(task), f, indent=2, ensure_ascii=False)
    
    logger.info(f"–£—Å—Ç–∞—Ä–µ–≤—à–∏–π –∞–≥–µ–Ω—Ç {name} —Å–æ–∑–¥–∞–Ω —Å ID {task.id}")
    return task.id

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
logger.warning("–ú–æ–¥—É–ª—å autonomous_agents_legacy.py —É—Å—Ç–∞—Ä–µ–ª. "
              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ agents_v2.py –¥–ª—è –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∞–≥–µ–Ω—Ç–æ–≤.")