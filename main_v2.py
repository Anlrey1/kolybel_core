# main_v2.py ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
import os
import logging
from datetime import datetime
from memory_core import MemoryCore
from core import (
    handle_user_input,
    should_use_template,
    DIALOG_HISTORY,
    DIALOG_MEMORY_THRESHOLD,
    FULL_AWARENESS,
    log_dialog,
    enhance_with_analytics,
    handle_system_commands,
    pick_template_id,
)
from config import AWAKENING_LOG_FILE
from template_engine import generate_from_template, TemplateManager
from goals import train_from_examples
from agents_v2 import get_agent_manager, AgentManager

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

memory = MemoryCore()

def load_manifest_to_memory(mem: MemoryCore):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞–Ω–∏—Ñ–µ—Å—Ç –≤ –ø–∞–º—è—Ç—å"""
    try:
        if os.path.isfile("kolybel_manifest.txt"):
            with open("kolybel_manifest.txt", "r", encoding="utf-8") as f:
                txt = f.read()
                mem.store(f"[manifest] {txt}", {
                          "type": "system", "source": "manual"})
                print("üìú –ú–∞–Ω–∏—Ñ–µ—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –ø–∞–º—è—Ç—å.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: {e}")

def initialize_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –ö–æ–ª—ã–±–µ–ª–∏ v2"""
    print("üåü –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ö–æ–ª—ã–±–µ–ª–∏ v2 —Å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç
    load_manifest_to_memory(memory)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤
    try:
        agent_manager = get_agent_manager(memory, {
            'execution_policy': 'failover',
            'health_check_interval': 60,
            'docker_enabled': True,
            'max_concurrent_local': 5
        })
        print("ü§ñ –ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≥–µ–Ω—Ç–æ–≤ v2 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üèóÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–Ω—Ç–∞–π–º—ã: {list(agent_manager.orchestrator.adapters.keys())}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞–Ω—Ç–∞–π–º–æ–≤
        health = agent_manager.get_runtime_health()
        for runtime, status in health.items():
            status_icon = "‚úÖ" if status['is_healthy'] else "‚ùå"
            print(f"   {status_icon} {runtime}: {'–ó–¥–æ—Ä–æ–≤' if status['is_healthy'] else '–ù–µ–∑–¥–æ—Ä–æ–≤'}")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
        return None
    
    print("=" * 60)
    return agent_manager

def show_main_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("\nüéØ –ö–æ–ª—ã–±–µ–ª—å v2 - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print("=" * 40)
    print("1. üí¨ –î–∏–∞–ª–æ–≥ —Å –ö–æ–ª—ã–±–µ–ª—å—é")
    print("2. ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏")
    print("3. üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏")
    print("4. üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    print("5. üåê –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("6. üì§ –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç –∞–≥–µ–Ω—Ç–æ–≤")
    print("7. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("0. üö™ –í—ã—Ö–æ–¥")
    print("=" * 40)

def handle_dialog_mode(agent_manager: AgentManager):
    """–†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ —Å –ö–æ–ª—ã–±–µ–ª—å—é"""
    print("\nüí¨ –†–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    print("–í–≤–µ–¥–∏—Ç–µ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    print("-" * 40)
    
    while True:
        try:
            user_input = input("\nüîπ –í—ã: ").strip()
            
            if user_input.lower() in ['exit', '–≤—ã—Ö–æ–¥', 'quit']:
                break
            
            if not user_input:
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if user_input.startswith(("goal:", "mission", "remind", "audit", "stats", "agents")):
                if user_input.startswith("agents"):
                    handle_agents_command(user_input, agent_manager)
                else:
                    response = handle_system_commands(user_input)
                    print(f"ü§ñ –ö–æ–ª—ã–±–µ–ª—å: {response}")
            else:
                # –û–±—ã—á–Ω—ã–π –¥–∏–∞–ª–æ–≥
                response = handle_user_input(user_input)
                print(f"ü§ñ –ö–æ–ª—ã–±–µ–ª—å: {response}")
                
        except KeyboardInterrupt:
            print("\n\nüëã –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def handle_agents_command(command: str, agent_manager: AgentManager):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏"""
    parts = command.split()
    
    if len(parts) == 1:  # –ü—Ä–æ—Å—Ç–æ "agents"
        show_agents_status(agent_manager)
    elif parts[1] == "create":
        create_agent_interactive(agent_manager)
    elif parts[1] == "list":
        show_agents_status(agent_manager)
    elif parts[1] == "delete" and len(parts) > 2:
        delete_agent_interactive(agent_manager, parts[2])
    else:
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  agents - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤")
        print("  agents create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
        print("  agents list - —Å–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤")
        print("  agents delete <id> - —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞")

def show_agents_status(agent_manager: AgentManager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        status = agent_manager.get_all_agents_status()
        
        print(f"\nü§ñ –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤ (–≤—Å–µ–≥–æ: {status['total_agents']})")
        print("-" * 50)
        
        if status['total_agents'] == 0:
            print("–ù–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤")
            return
        
        for agent_id, agent_data in status['agents'].items():
            success_rate = agent_data.get('success_rate', 0) * 100
            print(f"üìã {agent_data.get('name', 'Unknown')} ({agent_id[:8]}...)")
            print(f"   –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–Ω—Ç–∞–π–º: {agent_data.get('primary_runtime', 'unknown')}")
            print(f"   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%")
            print(f"   –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {agent_data.get('execution_count', 0)}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {agent_data.get('last_execution', '–ù–∏–∫–æ–≥–¥–∞')}")
            print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Ä–∞–Ω—Ç–∞–π–º–æ–≤
        print("üè• –ó–¥–æ—Ä–æ–≤—å–µ —Ä–∞–Ω—Ç–∞–π–º–æ–≤:")
        health = status.get('runtime_health', {})
        for runtime, health_data in health.items():
            status_icon = "‚úÖ" if health_data.get('is_healthy', False) else "‚ùå"
            print(f"   {status_icon} {runtime}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤: {e}")

def create_agent_interactive(agent_manager: AgentManager):
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
    print("\nüõ†Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
    print("-" * 30)
    
    try:
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∞–≥–µ–Ω—Ç–∞
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–≥–µ–Ω—Ç–∞:")
        print("1. RSS –ú–æ–Ω–∏—Ç–æ—Ä")
        print("2. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
        print("3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–≥–µ–Ω—Ç")
        
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
        
        if choice == "1":
            create_rss_agent_interactive(agent_manager)
        elif choice == "2":
            create_content_agent_interactive(agent_manager)
        elif choice == "3":
            create_custom_agent_interactive(agent_manager)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")

def create_rss_agent_interactive(agent_manager: AgentManager):
    """–°–æ–∑–¥–∞–Ω–∏–µ RSS –∞–≥–µ–Ω—Ç–∞"""
    name = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞: ").strip()
    rss_url = input("RSS URL: ").strip()
    chat_id = input("Telegram –∫–∞–Ω–∞–ª/—á–∞—Ç ID: ").strip()
    style = input("–°—Ç–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π'): ").strip() or "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å"
    
    # –í—ã–±–æ—Ä —Ä–∞–Ω—Ç–∞–π–º–æ–≤
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Ä–∞–Ω—Ç–∞–π–º—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ: local, n8n, docker")
    runtimes_input = input("–†–∞–Ω—Ç–∞–π–º—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'local,n8n'): ").strip()
    
    if runtimes_input:
        runtime_preferences = [r.strip() for r in runtimes_input.split(',')]
    else:
        runtime_preferences = ['local', 'n8n']
    
    try:
        agent_id = agent_manager.create_rss_agent(
            name=name,
            owner="console_user",
            rss_url=rss_url,
            telegram_chat_id=chat_id,
            style=style,
            runtime_preferences=runtime_preferences
        )
        
        print(f"‚úÖ RSS –∞–≥–µ–Ω—Ç '{name}' —Å–æ–∑–¥–∞–Ω —Å ID: {agent_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RSS –∞–≥–µ–Ω—Ç–∞: {e}")

def create_content_agent_interactive(agent_manager: AgentManager):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    name = input("–ù–∞–∑–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞: ").strip()
    template_id = input("ID —à–∞–±–ª–æ–Ω–∞: ").strip()
    chat_id = input("Telegram –∫–∞–Ω–∞–ª/—á–∞—Ç ID: ").strip()
    topics_input = input("–¢–µ–º—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").strip()
    topics = [t.strip() for t in topics_input.split(',') if t.strip()]
    
    try:
        agent_id = agent_manager.create_content_agent(
            name=name,
            owner="console_user",
            template_id=template_id,
            telegram_chat_id=chat_id,
            topics=topics
        )
        
        print(f"‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç –∞–≥–µ–Ω—Ç '{name}' —Å–æ–∑–¥–∞–Ω —Å ID: {agent_id}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç –∞–≥–µ–Ω—Ç–∞: {e}")

def create_custom_agent_interactive(agent_manager: AgentManager):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    print("–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
    print("1. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (–±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ)")
    print("2. –ò–º–ø–æ—Ä—Ç –∏–∑ JSON/YAML —Ñ–∞–π–ª–∞")
    
    choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
    
    if choice == "2":
        file_path = input("–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: ").strip()
        try:
            agent_id = agent_manager.import_agent_from_file(file_path)
            print(f"‚úÖ –ê–≥–µ–Ω—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Å ID: {agent_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
    else:
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–æ–π '5' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é")

def delete_agent_interactive(agent_manager: AgentManager, agent_id: str):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≥–µ–Ω—Ç–µ
        status = agent_manager.get_agent_status(agent_id)
        if status.get('status') == 'not_deployed':
            print(f"‚ùå –ê–≥–µ–Ω—Ç {agent_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        agent_name = status.get('name', 'Unknown')
        confirm = input(f"–£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ '{agent_name}' ({agent_id})? (y/N): ").strip().lower()
        
        if confirm == 'y':
            success = agent_manager.delete_agent(agent_id)
            if success:
                print(f"‚úÖ –ê–≥–µ–Ω—Ç '{agent_name}' —É–¥–∞–ª–µ–Ω")
            else:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞")
        else:
            print("–û—Ç–º–µ–Ω–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: {e}")

def handle_agents_menu(agent_manager: AgentManager):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏"""
    while True:
        print("\nü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏")
        print("-" * 30)
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤")
        print("2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
        print("3. –£–¥–∞–ª–∏—Ç—å –∞–≥–µ–Ω—Ç–∞")
        print("4. –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é")
        print("5. –≠–∫—Å–ø–æ—Ä—Ç –∞–≥–µ–Ω—Ç–∞")
        print("0. –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        
        choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
        
        if choice == "0":
            break
        elif choice == "1":
            show_agents_status(agent_manager)
        elif choice == "2":
            create_agent_interactive(agent_manager)
        elif choice == "3":
            agent_id = input("ID –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ").strip()
            delete_agent_interactive(agent_manager, agent_id)
        elif choice == "4":
            execute_agent_interactive(agent_manager)
        elif choice == "5":
            export_agent_interactive(agent_manager)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

def execute_agent_interactive(agent_manager: AgentManager):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ –≤—Ä—É—á–Ω—É—é"""
    agent_id = input("ID –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ").strip()
    
    try:
        print(f"üöÄ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞ {agent_id}...")
        result = agent_manager.execute_agent(agent_id)
        
        if result.success:
            print(f"‚úÖ –ê–≥–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ {result.execution_time:.2f}—Å")
            if result.logs:
                print("üìã –õ–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
                for log in result.logs:
                    print(f"   {log}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.error}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def export_agent_interactive(agent_manager: AgentManager):
    """–≠–∫—Å–ø–æ—Ä—Ç –∞–≥–µ–Ω—Ç–∞"""
    agent_id = input("ID –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞: ").strip()
    format_choice = input("–§–æ—Ä–º–∞—Ç (json/yaml, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é json): ").strip().lower() or "json"
    file_path = input(f"–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é agent_{agent_id}.{format_choice}): ").strip()
    
    if not file_path:
        file_path = f"agent_{agent_id}.{format_choice}"
    
    try:
        agent_manager.export_agent_to_file(agent_id, file_path, format_choice)
        print(f"‚úÖ –ê–≥–µ–Ω—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {file_path}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

def launch_web_interface():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("\nüåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    try:
        import subprocess
        subprocess.run(["python", "start_web_interface.py"])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Ä—É—á–Ω—É—é: python start_web_interface.py")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    SECRET_KEY = "–ø—Ä–∏–≤–µ—Ç"
    while True:
        code = input("üîπ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ").strip()
        if code == SECRET_KEY:
            print("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–æ–ª—ã–±–µ–ª—å v2!")
            break
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    agent_manager = initialize_system()
    if not agent_manager:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
        return
    
    # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    while True:
        try:
            show_main_menu()
            choice = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip()
            
            if choice == "0":
                print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                agent_manager.stop()
                break
            elif choice == "1":
                handle_dialog_mode(agent_manager)
            elif choice == "2":
                handle_agents_menu(agent_manager)
            elif choice == "3":
                print("üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–ª—è–º–∏ (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã goal: –≤ –¥–∏–∞–ª–æ–≥–µ)")
            elif choice == "4":
                show_agents_status(agent_manager)
            elif choice == "5":
                launch_web_interface()
            elif choice == "6":
                print("üì§ –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –º–µ–Ω—é –∞–≥–µ–Ω—Ç–æ–≤")
            elif choice == "7":
                print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
        except KeyboardInterrupt:
            print("\n\nüëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            agent_manager.stop()
            break
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()