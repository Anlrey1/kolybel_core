# core.py ‚Äî –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –¥–∏–∞–ª–æ–≥–∞/–∏–Ω—Ç–µ–Ω—Ç–æ–≤/—à–∞–±–ª–æ–Ω–æ–≤ + –ò–Ω—Ç—É–∏—Ü–∏—è (–±–∞–∑/—Ä–∞—Å—à–∏—Ä)
import logging
from typing import Tuple

from memory_core import MemoryCore
from llm import ask_llm_with_context
from template_engine import TemplateManager, generate_from_template
from intent import handle_intent

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

# –î–∏–∞–ª–æ–≥–æ–≤–∞—è –ø–∞–º—è—Ç—å —É—Ä–æ–≤–Ω—è —Å–µ—Å—Å–∏–∏
DIALOG_HISTORY = []
DIALOG_MEMORY_THRESHOLD = 6
FULL_AWARENESS = True  # ‚Üê –í–ö–õ ¬´–ø–æ–ª–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ¬ª –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ç—É–∏—Ü–∏–∏

memory = MemoryCore()
templates = TemplateManager()

# –ò–Ω—Ç—É–∏—Ü–∏—è: –±–∞–∑–æ–≤–∞—è –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è
from intuition import IntuitionEngine as BasicIntuition
try:
    from intuition_advanced import IntuitionEngine as AdvancedIntuition
except Exception:
    AdvancedIntuition = BasicIntuition  # fallback

intuition = AdvancedIntuition() if FULL_AWARENESS else BasicIntuition()

def should_use_template(user_input: str) -> bool:
    t = templates.best(user_input)
    return t is not None

def enhance_with_analytics(text: str, user_input: str) -> str:
    # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–µ—Ç—Ä–∏–∫: –º–æ–∂–Ω–æ –æ–±–æ–≥–∞—Ç–∏—Ç—å —Ö—ç—à—Ç–µ–≥–∞–º–∏/CTA
    return text

def log_dialog(q: str, a: str):
    try:
        memory.store(q, {"type": "dialog_q"})
        memory.store(a, {"type": "response", "engagement": 0.7})
    except Exception:
        pass

def handle_system_commands(user_input: str) -> str:
    from goals import save_goal, remind_goals, audit_agents, summarize_agent_performance
    cmd = user_input.strip().lower()

    if cmd.startswith("goal:"):
        text = user_input.split(":", 1)[1].strip()
        save_goal(memory, text)
        return "üéØ –¶–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"

    if cmd.startswith("remind"):
        remind_goals()
        return "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ (—Å–º. –∫–æ–Ω—Å–æ–ª—å)"

    if cmd.startswith("audit"):
        audit_agents()
        return "üßæ –ê—É–¥–∏—Ç –∑–∞–≤–µ—Ä—à—ë–Ω"

    if cmd.startswith("mission"):
        return "üõ∞ –ú–∏—Å—Å–∏—è –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞ (–∑–∞–≥–ª—É—à–∫–∞)"

    if cmd.startswith("stats"):
        return summarize_agent_performance()

    return "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"

def pick_template_id(user_input: str) -> str:
    t = templates.best(user_input)
    return t.id if t else ""

def _maybe_prepend_intuition(user_input: str, reply: str) -> str:
    """–ï—Å–ª–∏ –∏–Ω—Ç—É–∏—Ü–∏—è —á—Ç–æ-—Ç–æ –ø–æ–¥—Å–∫–∞–∑–∞–ª–∞ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–≤–µ—Ä—Ö—É."""
    try:
        hint = intuition.detect_intuition(user_input)
        if hint:
            return f"{hint}\n\n{reply}"
        return reply
    except Exception:
        return reply

def handle_user_input(user_input: str) -> str:
    # –°–Ω–∞—á–∞–ª–∞ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    if user_input.startswith(("goal:", "mission", "remind", "audit", "stats")):
        reply = handle_system_commands(user_input)
        return _maybe_prepend_intuition(user_input, reply)

    # –ò–Ω—Ç–µ–Ω—Ç—ã (–∞–≥–µ–Ω—Ç—ã/–∫–∞—Ä—Ç–∏–Ω–∫–∏/–∏ —Ç.–ø.)
    reply = handle_intent(user_input, memory=memory)
    return _maybe_prepend_intuition(user_input, reply)
