# agents.py ‚Äî –≥–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ (n8n + –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ)
import os
import logging
import requests
from datetime import datetime
from typing import Dict, Optional
from llm import ask_llm_with_context
from memory_core import MemoryCore
from config import (
    TELEGRAM_TOKEN,
    TELEGRAM_CHANNEL_ID,
    TELEGRAM_ADMIN_ID,
)
from template_engine import generate_from_template
from autonomous_agents import create_autonomous_agent_from_plan, get_agent_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è n8n (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)
N8N_API = os.getenv("N8N_API_URL", "")
N8N_AUTH = (os.getenv("N8N_USER", ""), os.getenv("N8N_PASSWORD", ""))
PROMO_BUDGET = int(os.getenv("PROMO_BUDGET", "0"))


def create_agent_from_plan(
    memory: MemoryCore,
    rss_url: str = "https://dtf.ru/rss",
    chat_id: str = "-1002669388680",
    style: str = "–≤ —Å—Ç–∏–ª–µ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ –¥–æ 18 –ª–µ—Ç",
    use_n8n: bool = None,
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞: —Å–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ—Ç—Å—è n8n, –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ —Å–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ
    """
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ n8n
    if use_n8n is None:
        use_n8n = bool(N8N_API and N8N_AUTH[0])

    if use_n8n:
        try:
            return _create_n8n_agent(memory, rss_url, chat_id, style)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å n8n –∞–≥–µ–Ω—Ç–∞: {e}")
            logger.info("–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞...")

    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    return create_autonomous_agent_from_plan(
        memory=memory,
        agent_type="rss_monitor",
        name=f"RSS Monitor ({rss_url.split('/')[-2] if '/' in rss_url else 'RSS'})",
        rss_url=rss_url,
        chat_id=chat_id,
        style=style,
        schedule="0 9,15,20 * * *"
    )


def _create_n8n_agent(
    memory: MemoryCore,
    rss_url: str,
    chat_id: str,
    style: str
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ n8n (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞)
    """
    prompt = (
        f"–°–æ–∑–¥–∞–π JSON-–∞–≥–µ–Ω—Ç–∞ n8n, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
        f"- —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏: 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (–≤ 9:00, 15:00, 20:00)\n"
        f"- –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS: {rss_url}\n"
        f"- –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏\n"
        f"- –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ LLM, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∏–ª—å {style}\n"
        f"- –ø—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram-–∫–∞–Ω–∞–ª —Å chat_id {chat_id} —á–µ—Ä–µ–∑ Telegram API\n\n"
        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON n8n workflow. –í—ã–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
    )

    result = ask_llm_with_context(prompt, model="mistral")
    logger.info(f"–°–æ–∑–¥–∞–Ω n8n –∞–≥–µ–Ω—Ç: {result[:100]}...")

    memory.store(f"[agent] {result}")

    os.makedirs("approved_goals", exist_ok=True)
    agent_filename = f"n8n_agent_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    agent_path = os.path.join("approved_goals", agent_filename)

    with open(agent_path, "w", encoding="utf-8") as f:
        f.write(result)

    # –ü—É–±–ª–∏–∫—É–µ–º –≤ n8n
    headers = {"Content-Type": "application/json"}
    response = requests.post(
        N8N_API,
        auth=N8N_AUTH,
        headers=headers,
        data=result.encode("utf-8"),
        timeout=30,
    )

    if response.status_code == 200:
        logger.info("N8N –∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        log_agent_usage(agent_filename, True)

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
        if PROMO_BUDGET > 0:
            add_promotion_workflow(agent_path, chat_id)
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ n8n: {response.status_code}")
        log_agent_usage(agent_filename, False)
        raise Exception(f"N8N API error: {response.status_code}")

    return agent_path


def create_content_agent(
    memory: MemoryCore,
    template_id: str,
    chat_id: str,
    topics: list = None,
    schedule: str = "every 4 hours"
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    """
    config = {
        "name": f"Content Generator ({template_id})",
        "description": f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —à–∞–±–ª–æ–Ω—É {template_id}",
        "type": "content_generator",
        "schedule": schedule,
        "config": {
            "template_id": template_id,
            "chat_id": chat_id,
            "topics": topics or []
        }
    }

    manager = get_agent_manager(memory)
    agent_id = manager.create_agent(config)

    if not manager.is_running:
        manager.start_scheduler()

    logger.info(f"–°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {agent_id}")
    return agent_id


def create_channel_manager_agent(
    memory: MemoryCore,
    chat_id: str,
    actions: list = None
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º
    """
    config = {
        "name": f"Channel Manager ({chat_id})",
        "description": f"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–º {chat_id}",
        "type": "channel_manager",
        "schedule": "0 12 * * *",  # –†–∞–∑ –≤ –¥–µ–Ω—å –≤ 12:00
        "config": {
            "chat_id": chat_id,
            "actions": actions or ["analytics", "engagement"]
        }
    }

    manager = get_agent_manager(memory)
    agent_id = manager.create_agent(config)

    if not manager.is_running:
        manager.start_scheduler()

    logger.info(f"–°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–º: {agent_id}")
    return agent_id


def get_agents_status(memory: MemoryCore) -> Dict:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ (n8n + –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ)
    """
    manager = get_agent_manager(memory)
    autonomous_agents = manager.list_agents()

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ n8n –∞–≥–µ–Ω—Ç–∞—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤
    n8n_agents = []
    if os.path.exists("approved_goals"):
        for filename in os.listdir("approved_goals"):
            if filename.startswith("n8n_agent_") and filename.endswith(".json"):
                n8n_agents.append({
                    "id": filename,
                    "name": f"N8N Agent ({filename})",
                    "type": "n8n_workflow",
                    "is_active": True,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∞–∫—Ç–∏–≤–µ–Ω
                    "platform": "n8n"
                })

    return {
        "autonomous_agents": autonomous_agents,
        "n8n_agents": n8n_agents,
        "total_agents": len(autonomous_agents) + len(n8n_agents),
        "autonomous_count": len(autonomous_agents),
        "n8n_count": len(n8n_agents),
        "scheduler_running": manager.is_running
    }


def start_autonomous_system(memory: MemoryCore):
    """
    –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤
    """
    manager = get_agent_manager(memory)
    if not manager.is_running:
        manager.start_scheduler()
        logger.info("üöÄ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
    else:
        logger.info("‚ÑπÔ∏è –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")


def stop_autonomous_system(memory: MemoryCore):
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤
    """
    manager = get_agent_manager(memory)
    if manager.is_running:
        manager.stop_scheduler()
        logger.info("‚èπÔ∏è –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

# ... existing code ...


def add_promotion_workflow(agent_path: str, chat_id: str) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç workflow –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    """
    promo_workflow = {
        "nodes": [
            {
                "type": "n8n-nodes-base.telegramSendMessage",
                "properties": {
                    "message": f"–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª: @{chat_id}\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã –æ –Ω–∞—É–∫–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö!",
                    "chatIds": TELEGRAM_ADMIN_ID,
                    "schedule": "0 12 * * *",  # –†–∞–∑ –≤ –¥–µ–Ω—å –≤ 12:00
                },
            },
            {
                "type": "n8n-nodes-base.telegramSendMessage",
                "properties": {
                    "message": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –Ω–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                    "chatIds": ["@science", "@technews"],
                    "schedule": "0 18 * * 0",  # –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
                },
            },
        ]
    }

    try:
        promo_filename = agent_path.replace(".json", "_promo.json")
        with open(promo_filename, "w", encoding="utf-8") as f:
            import json
            json.dump(promo_workflow, f, ensure_ascii=False, indent=2)

        if N8N_API:
            headers = {"Content-Type": "application/json"}
            response = requests.post(
                N8N_API,
                auth=N8N_AUTH,
                headers=headers,
                json=promo_workflow,
                timeout=30,
            )
            return response.status_code == 200
        return True

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ-workflow: {e}")
        return False


def log_agent_usage(agent_name: str, success: bool):
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
    """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    status = "SUCCESS" if success else "FAILED"

    os.makedirs("agent_logs", exist_ok=True)
    with open("agent_logs/usage.log", "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] {agent_name}: {status}\n")


def audit_agents():
    """
    –ê—É–¥–∏—Ç –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ (n8n + –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ)
    """
    print("üîç –ê—É–¥–∏—Ç –∞–≥–µ–Ω—Ç–æ–≤:")

    # N8N –∞–≥–µ–Ω—Ç—ã
    n8n_count = 0
    if os.path.exists("approved_goals"):
        for name in os.listdir("approved_goals"):
            if name.startswith("n8n_agent_") and name.endswith(".json"):
                print(f"‚Ä¢ [N8N] {name}")
                n8n_count += 1

    # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
    autonomous_count = 0
    if os.path.exists("autonomous_agents"):
        for name in os.listdir("autonomous_agents"):
            if name.endswith(".json"):
                print(f"‚Ä¢ [AUTO] {name}")
                autonomous_count += 1

    print(
        f"\nüìä –ò—Ç–æ–≥–æ: N8N –∞–≥–µ–Ω—Ç–æ–≤: {n8n_count}, –ê–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö: {autonomous_count}")

    # –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    try:
        from autonomous_agents import _agent_manager
        if _agent_manager and _agent_manager.is_running:
            print("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: –†–ê–ë–û–¢–ê–ï–¢")
        else:
            print("‚è∏Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤: –û–°–¢–ê–ù–û–í–õ–ï–ù")
    except:
        print("‚ùì –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: –ù–ï–ò–ó–í–ï–°–¢–ï–ù")


def summarize_agent_performance():
    """
    –°–≤–æ–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤
    """
    try:
        # –ß–∏—Ç–∞–µ–º –ª–æ–≥–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        usage_stats = {"success": 0, "failed": 0}
        if os.path.exists("agent_logs/usage.log"):
            with open("agent_logs/usage.log", "r", encoding="utf-8") as f:
                for line in f:
                    if "SUCCESS" in line:
                        usage_stats["success"] += 1
                    elif "FAILED" in line:
                        usage_stats["failed"] += 1

        total = usage_stats["success"] + usage_stats["failed"]
        success_rate = (usage_stats["success"] / max(1, total)) * 100

        # –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
        autonomous_stats = ""
        try:
            from autonomous_agents import _agent_manager
            if _agent_manager:
                agents = _agent_manager.list_agents()
                active_count = len(
                    [a for a in agents if a.get("is_active", False)])
                autonomous_stats = f", –ê–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}/{len(agents)}"
        except:
            pass

        return f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: –≤—ã–ø–æ–ª–Ω–µ–Ω–æ {usage_stats['success']}/{total}, —É—Å–ø–µ—à–Ω–æ—Å—Ç—å {success_rate:.1f}%{autonomous_stats}"

    except Exception as e:
        return f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö ({e})"
