# agents.py
import os
import logging
import requests
from datetime import datetime
from typing import Dict, Optional
from llm import ask_llm_with_context
from memory_core import MemoryCore
from config import (
    N8N_API,
    N8N_AUTH,
    TELEGRAM_TOKEN,
    TELEGRAM_CHANNEL_ID,
    PROMO_BUDGET,
    TELEGRAM_ADMIN_ID,
)
from template_engine import generate_from_template

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def create_agent_from_plan(
    memory: MemoryCore,
    rss_url: str = "https://dtf.ru/rss",
    chat_id: str = "-1002669388680",
    style: str = "–≤ —Å—Ç–∏–ª–µ –¥–ª—è –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ –¥–æ 18 –ª–µ—Ç",
) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –∞–≥–µ–Ω—Ç–∞ n8n (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    """
    prompt = (
        f"–°–æ–∑–¥–∞–π JSON-–∞–≥–µ–Ω—Ç–∞ n8n, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n"
        f"- —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏: 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å (–≤ 9:00, 15:00, 20:00)\n"
        f"- –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS: {rss_url}\n"
        f"- –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏\n"
        f"- –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ LLM, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∏–ª—å {style}\n"
        f"- –ø—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram-–∫–∞–Ω–∞–ª —Å chat_id {chat_id} —á–µ—Ä–µ–∑ Telegram API\n\n"
        f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON n8n workflow. –í—ã–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π."
    )

    result = ask_llm_with_context(prompt, model="mistral")
    logger.info(f"–°–æ–∑–¥–∞–Ω –∞–≥–µ–Ω—Ç: {result[:100]}...")  # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ JSON

    memory.store(f"[agent] {result}")

    os.makedirs("approved_goals", exist_ok=True)
    agent_filename = f"agent_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    agent_path = os.path.join("approved_goals", agent_filename)

    with open(agent_path, "w", encoding="utf-8") as f:
        f.write(result)

    try:
        headers = {"Content-Type": "application/json"}
        response = requests.post(
            N8N_API,
            auth=N8N_AUTH,
            headers=headers,
            data=result.encode("utf-8"),
            timeout=30,
        )

        if response.status_code == 200:
            logger.info("–ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ n8n")
            log_agent_usage(agent_filename, True)

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
            if PROMO_BUDGET > 0:
                add_promotion_workflow(agent_path, chat_id)
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {response.status_code}")
            log_agent_usage(agent_filename, False)

    except Exception as e:
        logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
        log_agent_usage(agent_filename, False)

    return agent_path


def add_promotion_workflow(agent_path: str, chat_id: str) -> bool:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç workflow –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    """
    promo_workflow = {
        "nodes": [
            {
                "type": "n8n-nodes-base.telegramSendMessage",
                "properties": {
                    "message": f"–ù–æ–≤—ã–π –∫–∞–Ω–∞–ª: @{chat_id}\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã –æ –Ω–∞—É–∫–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö!",
                    "chatIds": TELEGRAM_ADMIN_ID,
                    "schedule": "0 12 * * *",  # –†–∞–∑ –≤ –¥–µ–Ω—å –≤ 12:00
                },
            },
            {
                "type": "n8n-nodes-base.telegramSendMessage",
                "properties": {
                    "message": "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –Ω–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!",
                    "chatIds": ["@science", "@technews"],
                    "schedule": "0 18 * * 1,5",  # –ü–Ω –∏ –ü—Ç –≤ 18:00
                },
            },
        ]
    }

    try:
        response = requests.post(
            f"{N8N_API}/promo", auth=N8N_AUTH, json=promo_workflow, timeout=20
        )
        return response.status_code == 200
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è: {str(e)}")
        return False


def log_agent_usage(agent_name: str, result: bool) -> None:
    """
    –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    """
    os.makedirs("agent_logs", exist_ok=True)
    with open("agent_logs/usage.log", "a", encoding="utf-8") as f:
        f.write(
            f"{datetime.now().isoformat()} | {agent_name} | {'—É—Å–ø–µ—Ö' if result else '–æ—à–∏–±–∫–∞'}\n"
        )


def summarize_agent_performance() -> None:
    """
    –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–≥–µ–Ω—Ç–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    """
    stats = {}
    try:
        with open("agent_logs/usage.log", "r", encoding="utf-8") as f:
            for line in f:
                parts = line.strip().split("|")
                if len(parts) == 3:
                    _, name, status = parts
                    name = name.strip()
                    status = status.strip()
                    if name not in stats:
                        stats[name] = {"—É—Å–ø–µ—Ö": 0, "–æ—à–∏–±–∫–∞": 0}
                    stats[name][status] += 1

        print("üìà –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤:")
        for name, count in stats.items():
            print(f"{name} ‚Äî ‚úÖ {count['—É—Å–ø–µ—Ö']} / ‚ùå {count['–æ—à–∏–±–∫–∞']}")

    except FileNotFoundError:
        print("(–ª–æ–≥–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)")


def track_competitor_channels() -> None:
    """
    –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
    """
    competitors = ["@sci", "@deep_tech", "@future_science"]
    for channel in competitors:
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–Ω–∞–ª–æ–≤
            logger.info(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: {channel}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {channel}: {str(e)}")


def create_channel_agent(channel_theme: str) -> Dict:
    """
    –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    """
    workflow = {
        "nodes": [
            {
                "type": "n8n-nodes-base.telegramCreateChannel",
                "properties": {
                    "title": f"{channel_theme} | –ö–æ–ª—ã–±–µ–ª—å",
                    "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–∞–Ω–∞–ª, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ò–ò",
                    "public": True,
                },
            },
            {
                "type": "n8n-nodes-base.telegramPost",
                "properties": {
                    "schedule": "0 9,15,20 * * *",
                    "contentType": "adaptive",
                },
            },
            {
                "type": "n8n-nodes-base.telegramPromote",
                "properties": {
                    "budget": PROMO_BUDGET,
                    "targetChannels": ["@science", "@technews"],
                },
            },
        ]
    }

    try:
        response = requests.post(N8N_API, auth=N8N_AUTH, json=workflow, timeout=30)
        return response.json()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {str(e)}")
        return {"status": "error", "message": str(e)}
