# check_system_v2.py ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ö–æ–ª—ã–±–µ–ª–∏ v2
import os
import sys
import importlib
import json
from datetime import datetime
from typing import Dict, List, Tuple

class SystemChecker:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –ö–æ–ª—ã–±–µ–ª–∏ v2"""
    
    def __init__(self):
        self.results = []
        self.errors = []
        self.warnings = []
    
    def check_python_version(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏—é Python"""
        version = sys.version_info
        if version.major >= 3 and version.minor >= 9:
            self.results.append(f"‚úÖ Python {version.major}.{version.minor}.{version.micro}")
            return True
        else:
            self.errors.append(f"‚ùå Python {version.major}.{version.minor} (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.9+)")
            return False
    
    def check_required_files(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        required_files = [
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ v2
            "agent_specification.py",
            "runtime_adapters.py", 
            "runtime_orchestrator.py",
            "agents_v2.py",
            "main_v2.py",
            
            # –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            "web_interface.py",
            "start_web_interface.py",
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
            "memory_core.py",
            "core.py",
            "config.py",
            "llm.py",
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            "requirements.txt",
            "kolybel_manifest.txt",
            
            # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            "README.md",
            "ARCHITECTURE_V2.md",
            "WEB_INTERFACE.md"
        ]
        
        missing_files = []
        for file in required_files:
            if os.path.exists(file):
                self.results.append(f"‚úÖ {file}")
            else:
                missing_files.append(file)
                self.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {file}")
        
        return len(missing_files) == 0
    
    def check_required_directories(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        required_dirs = [
            "templates",
            "static/css",
            "static/js",
            "prompt_templates",
            "logs"
        ]
        
        optional_dirs = [
            "deployed_agents",
            "agent_specifications", 
            "runtime_configs",
            "migration_logs"
        ]
        
        missing_dirs = []
        for dir_name in required_dirs:
            if os.path.exists(dir_name):
                self.results.append(f"‚úÖ {dir_name}/")
            else:
                missing_dirs.append(dir_name)
                self.errors.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
        
        for dir_name in optional_dirs:
            if os.path.exists(dir_name):
                self.results.append(f"‚úÖ {dir_name}/ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è)")
            else:
                self.warnings.append(f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {dir_name}")
        
        return len(missing_dirs) == 0
    
    def check_dependencies(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        required_packages = [
            "flask",
            "flask_socketio",
            "requests",
            "schedule",
            "feedparser",
            "sentence_transformers",
            "chromadb",
            "pyyaml"
        ]
        
        optional_packages = [
            "docker",
            "aiogram"
        ]
        
        missing_packages = []
        
        for package in required_packages:
            try:
                importlib.import_module(package.replace('-', '_'))
                self.results.append(f"‚úÖ {package}")
            except ImportError:
                missing_packages.append(package)
                self.errors.append(f"‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç: {package}")
        
        for package in optional_packages:
            try:
                importlib.import_module(package.replace('-', '_'))
                self.results.append(f"‚úÖ {package} (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)")
            except ImportError:
                self.warnings.append(f"‚ö†Ô∏è –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç: {package}")
        
        return len(missing_packages) == 0
    
    def check_configuration(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        config_ok = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º config.py
        try:
            import config
            self.results.append("‚úÖ config.py –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if hasattr(config, 'TELEGRAM_TOKEN'):
                if config.TELEGRAM_TOKEN and config.TELEGRAM_TOKEN != "your_token_here":
                    self.results.append("‚úÖ TELEGRAM_TOKEN –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                else:
                    self.warnings.append("‚ö†Ô∏è TELEGRAM_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            
            if hasattr(config, 'TELEGRAM_CHANNEL_ID'):
                if config.TELEGRAM_CHANNEL_ID:
                    self.results.append("‚úÖ TELEGRAM_CHANNEL_ID –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                else:
                    self.warnings.append("‚ö†Ô∏è TELEGRAM_CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.py: {e}")
            config_ok = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è n8n
        n8n_url = os.getenv('N8N_API_URL')
        if n8n_url:
            self.results.append(f"‚úÖ N8N_API_URL: {n8n_url}")
        else:
            self.warnings.append("‚ö†Ô∏è N8N_API_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (n8n –∞–¥–∞–ø—Ç–µ—Ä –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")
        
        return config_ok
    
    def check_external_services(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        services_ok = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
        try:
            import docker
            client = docker.from_env()
            client.ping()
            self.results.append("‚úÖ Docker –¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            self.warnings.append(f"‚ö†Ô∏è Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º n8n (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        n8n_url = os.getenv('N8N_API_URL')
        if n8n_url:
            try:
                import requests
                response = requests.get(f"{n8n_url}/workflows", timeout=5)
                if response.status_code == 200:
                    self.results.append("‚úÖ n8n API –¥–æ—Å—Ç—É–ø–µ–Ω")
                else:
                    self.warnings.append(f"‚ö†Ô∏è n8n API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: {response.status_code})")
            except Exception as e:
                self.warnings.append(f"‚ö†Ô∏è n8n API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        
        return services_ok
    
    def check_system_modules(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        modules_ok = True
        
        core_modules = [
            "memory_core",
            "agent_specification", 
            "runtime_adapters",
            "runtime_orchestrator",
            "agents_v2"
        ]
        
        for module_name in core_modules:
            try:
                importlib.import_module(module_name)
                self.results.append(f"‚úÖ {module_name}.py –∑–∞–≥—Ä—É–∂–µ–Ω")
            except Exception as e:
                self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {module_name}.py: {e}")
                modules_ok = False
        
        return modules_ok
    
    def test_basic_functionality(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"""
        try:
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
            from agent_specification import AgentSpecificationFactory
            
            spec = AgentSpecificationFactory.create_rss_monitor(
                name="Test Agent",
                owner="test_user",
                rss_url="https://example.com/rss",
                telegram_chat_id="@test"
            )
            
            errors = spec.validate()
            if not errors:
                self.results.append("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.errors.append(f"‚ùå –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏: {errors}")
                return False
            
            # –¢–µ—Å—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            json_str = spec.to_json()
            yaml_str = spec.to_yaml()
            
            if json_str and yaml_str:
                self.results.append("‚úÖ –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON/YAML —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                self.errors.append("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
                return False
            
            return True
            
        except Exception as e:
            self.errors.append(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False
    
    def run_all_checks(self) -> Dict[str, bool]:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ö–æ–ª—ã–±–µ–ª–∏ v2")
        print("=" * 50)
        
        checks = {
            "Python –≤–µ—Ä—Å–∏—è": self.check_python_version(),
            "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã": self.check_required_files(),
            "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏": self.check_required_directories(),
            "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏": self.check_dependencies(),
            "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": self.check_configuration(),
            "–í–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã": self.check_external_services(),
            "–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏": self.check_system_modules(),
            "–ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": self.test_basic_functionality()
        }
        
        return checks
    
    def print_results(self, checks: Dict[str, bool]):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:")
        print("-" * 30)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        for check_name, result in checks.items():
            status = "‚úÖ" if result else "‚ùå"
            print(f"{status} {check_name}")
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏
        if self.results:
            print(f"\n‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ({len(self.results)}):")
            for result in self.results:
                print(f"   {result}")
        
        if self.warnings:
            print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"   {warning}")
        
        if self.errors:
            print(f"\n‚ùå –û—à–∏–±–∫–∏ ({len(self.errors)}):")
            for error in self.errors:
                print(f"   {error}")
        
        # –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å
        print("\n" + "=" * 50)
        
        all_critical_ok = all(checks[key] for key in ["Python –≤–µ—Ä—Å–∏—è", "–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", "–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏"])
        
        if all_critical_ok:
            print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
            print("   ‚Ä¢ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python main_v2.py")
            print("   ‚Ä¢ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: python start_web_interface.py")
            
            if self.warnings:
                print(f"\nüí° –ï—Å—Ç—å {len(self.warnings)} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
            print("\nüîß –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:")
            
            if not checks["Python –≤–µ—Ä—Å–∏—è"]:
                print("   ‚Ä¢ –û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ –≤–µ—Ä—Å–∏–∏ 3.9+")
            if not checks["–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã"]:
                print("   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
            if not checks["–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"]:
                print("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
            if not checks["–°–∏—Å—Ç–µ–º–Ω—ã–µ –º–æ–¥—É–ª–∏"]:
                print("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã")
        
        return all_critical_ok

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    checker = SystemChecker()
    checks = checker.run_all_checks()
    system_ready = checker.print_results(checks)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report = {
        "timestamp": datetime.now().isoformat(),
        "system_ready": system_ready,
        "checks": checks,
        "results": checker.results,
        "warnings": checker.warnings,
        "errors": checker.errors
    }
    
    os.makedirs("logs", exist_ok=True)
    with open("logs/system_check.json", 'w', encoding='utf-8') as f:
        json.dump(report, f, indent=2, ensure_ascii=False)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: logs/system_check.json")
    
    return 0 if system_ready else 1

if __name__ == "__main__":
    exit(main())