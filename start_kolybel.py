#!/usr/bin/env python3
# start_kolybel.py ‚Äî —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –ö–æ–ª—ã–±–µ–ª—å v2

import os
import sys
import subprocess
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    required_packages = [
        'flask',
        'schedule',
        'feedparser'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã:")
        for package in missing_packages:
            print(f"   ‚Ä¢ {package}")
        
        print("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing_packages)}")
        
        install = input("\nü§î –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? (y/n): ").lower().strip()
        if install in ['y', 'yes', '–¥–∞']:
            try:
                subprocess.check_call([sys.executable, '-m', 'pip', 'install'] + missing_packages)
                print("‚úÖ –ü–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤: {e}")
                return False
        else:
            return False
    
    return True

def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    directories = [
        'agent_logs',
        'approved_goals',
        'templates',
        'static'
    ]
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
    
    logger.info("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã")

def show_banner():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–Ω–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                              ‚ïë
‚ïë    ü§ñ –ö–æ–ª—ã–±–µ–ª—å v2 - –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç    ‚ïë
‚ïë                                                              ‚ïë
‚ïë    –ù–µ–∑–∞–≤–∏—Å–∏–º–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º failover ‚ïë
‚ïë                                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
"""
    print(banner)

def show_menu():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("\nüéØ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. üåê –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    print("2. üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤")
    print("3. ü§ñ –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞")
    print("4. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    print("5. üß™ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã")
    print("0. üö™ –í—ã—Ö–æ–¥")
    
    return input("\nüëâ –í–∞—à –≤—ã–±–æ—Ä: ").strip()

def start_web_interface():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    try:
        from web_interface import main as web_main
        web_main()
    except ImportError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def run_migration():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –∞–≥–µ–Ω—Ç–æ–≤"""
    try:
        from migration_tool import main as migration_main
        migration_main()
    except ImportError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")

def create_test_agent():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
    try:
        from agents_v2 import get_agent_manager
        
        manager = get_agent_manager()
        
        print("\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ RSS –∞–≥–µ–Ω—Ç–∞...")
        
        agent_id = manager.create_rss_agent(
            name="–¢–µ—Å—Ç–æ–≤—ã–π DTF –∞–≥–µ–Ω—Ç",
            owner="test_user",
            rss_url="https://dtf.ru/rss",
            telegram_chat_id="-1002669388680",
            schedule="*/30 * * * *",  # –ö–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            style="–∫—Ä–∞—Ç–∫–∏–π –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å",
            runtime_preferences=["local", "n8n"]
        )
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —Å ID: {agent_id}")
        
        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≥–µ–Ω—Ç–∞
        print("üöÄ –ü—Ä–æ–±–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞...")
        result = manager.execute_agent(agent_id)
        
        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:")
        print(f"   –°—Ç–∞—Ç—É—Å: {result.status.value}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result.message}")
        print(f"   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result.execution_time:.2f}—Å")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def show_system_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from agents_v2 import get_agent_manager
        
        manager = get_agent_manager()
        
        print("\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –ö–æ–ª—ã–±–µ–ª—å v2:")
        print("=" * 50)
        
        # –°—Ç–∞—Ç—É—Å —Ä–∞–Ω—Ç–∞–π–º–æ–≤
        print("\nüèóÔ∏è –†–∞–Ω—Ç–∞–π–º—ã:")
        runtime_status = manager.get_runtime_status()
        for name, status in runtime_status.items():
            health_icon = "‚úÖ" if status.healthy else "‚ùå"
            print(f"   {health_icon} {name.title()}: {'–ó–¥–æ—Ä–æ–≤' if status.healthy else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
        # –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
        print("\nü§ñ –ê–≥–µ–Ω—Ç—ã:")
        agents = manager.list_agents()
        if agents:
            for agent in agents:
                print(f"   ‚Ä¢ {agent['name']} ({agent['agent_id'][:8]}...)")
                print(f"     –†–∞–Ω—Ç–∞–π–º: {agent['primary_runtime']}")
                print(f"     –í—ã–ø–æ–ª–Ω–µ–Ω–∏–π: {agent['execution_count']}")
                print(f"     –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {agent['success_rate']*100:.1f}%")
        else:
            print("   –ê–≥–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        health_results = manager.orchestrator.force_health_check()
        
        for runtime_name, is_healthy in health_results.items():
            health_icon = "‚úÖ" if is_healthy else "‚ùå"
            print(f"   {health_icon} {runtime_name}: {'OK' if is_healthy else '–ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def run_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")

    tests_passed = 0
    tests_total = 0

    # –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
    tests_total += 1
    try:
        from agents_v2 import AgentManager
        from agent_specification import AgentSpecification
        from runtime_orchestrator import RuntimeOrchestrator
        from runtime_adapters import LocalRuntimeAdapter
        print("‚úÖ –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π - –ü–†–û–ô–î–ï–ù")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 1: –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π - –ü–†–û–í–ê–õ–ï–ù ({e})")

    # –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤
    tests_total += 1
    try:
        from agents_v2 import get_agent_manager
        manager = get_agent_manager()
        print("‚úÖ –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤ - –ü–†–û–ô–î–ï–ù")
        tests_passed += 1
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–≥–µ–Ω—Ç–æ–≤ - –ü–†–û–í–ê–õ–ï–ù ({e})")

    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–Ω—Ç–∞–π–º–æ–≤
    tests_total += 1
    try:
        runtime_status = manager.get_runtime_status()
        if runtime_status:
            print("‚úÖ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–Ω—Ç–∞–π–º–æ–≤ - –ü–†–û–ô–î–ï–ù")
            tests_passed += 1
        else:
            print("‚ùå –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–Ω—Ç–∞–π–º–æ–≤ - –ü–†–û–í–ê–õ–ï–ù (–Ω–µ—Ç —Ä–∞–Ω—Ç–∞–π–º–æ–≤)")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–Ω—Ç–∞–π–º–æ–≤ - –ü–†–û–í–ê–õ–ï–ù ({e})")

    # –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
    tests_total += 1
    try:
        from agent_specification import AgentSpecification, AgentTrigger, AgentStep, TriggerType, StepType
        from datetime import datetime

        spec = AgentSpecification(
            id="test_agent",
            name="–¢–µ—Å—Ç–æ–≤—ã–π –∞–≥–µ–Ω—Ç",
            owner="test",
            triggers=[AgentTrigger(type=TriggerType.SCHEDULE, config={"cron": "0 * * * *"})],
            steps=[AgentStep(id="test_step", name="–¢–µ—Å—Ç", type=StepType.HTTP_REQUEST, config={})]
        )

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
        errors = spec.validate()
        if not errors:
            print("‚úÖ –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ - –ü–†–û–ô–î–ï–ù")
            tests_passed += 1
        else:
            print(f"‚ùå –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ - –ü–†–û–í–ê–õ–ï–ù ({errors})")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞ - –ü–†–û–í–ê–õ–ï–ù ({e})")

    # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –∞–¥–∞–ø—Ç–µ—Ä–æ–≤
    tests_total += 1
    try:
        from runtime_adapters import LocalRuntimeAdapter
        adapter = LocalRuntimeAdapter()
        if adapter.is_available():
            print("‚úÖ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ - –ü–†–û–ô–î–ï–ù")
            tests_passed += 1
        else:
            print("‚ùå –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ - –ü–†–û–í–ê–õ–ï–ù (–Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω)")
    except Exception as e:
        print(f"‚ùå –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–¥–∞–ø—Ç–µ—Ä–∞ - –ü–†–û–í–ê–õ–ï–ù ({e})")

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{tests_total} –ø—Ä–æ–π–¥–µ–Ω–æ")

    if tests_passed == tests_total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã.")
        return False
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã.")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    show_banner()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏. –í—ã—Ö–æ–¥.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    create_directories()
    
    while True:
        choice = show_menu()
        
        if choice == '1':
            start_web_interface()
        elif choice == '2':
            run_migration()
        elif choice == '3':
            create_test_agent()
        elif choice == '4':
            show_system_status()
        elif choice == '5':
            run_tests()
        elif choice == '0':
            print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        
        input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")

if __name__ == '__main__':
    main()