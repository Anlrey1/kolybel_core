# telegram_bot.py ‚Äî Telegram –±–æ—Ç –¥–ª—è –ö–æ–ª—ã–±–µ–ª—å v2
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from memory_core import MemoryCore
    memory = MemoryCore()
except ImportError:
    class MemoryCore:
        def store(self, document, metadata=None):
            print(f"[MEMORY] {document}")
        
        def get_similar(self, query, filter_type=None, n_results=5):
            return []
    memory = MemoryCore()

try:
    from template_engine import TemplateManager
    template_manager = TemplateManager()
except ImportError:
    class TemplateManager:
        def find_best_template(self, query):
            return None
    template_manager = TemplateManager()

try:
    from llm import ask_llm_with_context
except ImportError:
    def ask_llm_with_context(prompt, model="mistral"):
        return f"[LLM STUB] Response for: {prompt[:50]}..."

try:
    from template_engine import generate_from_template
except ImportError:
    def generate_from_template(template_id, context, use_training=False):
        return f"[TEMPLATE STUB] Generated content from {template_id}"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
dp = Router()

@dp.message(F.text & ~F.text.startswith("/"))
async def handle_user_message(message: Message):
    user_input = message.text.strip()
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: '{user_input}'")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ø–∞–º—è—Ç—å
    memory.store(document=user_input, metadata={"type": "user_query", "timestamp": datetime.now().isoformat()})
    
    # –ü–æ–¥–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
    template = template_manager.find_best_template(user_input)
    
    if template:
        logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {template.title}")
        reply = generate_from_template(
            template.id,
            context={"query": user_input},
            use_training=True
        )
    else:
        # –§–æ–ª–±—ç–∫ –Ω–∞ –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        relevant_memories = memory.get_similar("successful response", filter_type="response", n_results=10)
        memory_prompt = "\n".join([f"[–ø–∞–º—è—Ç—å] {m['content']}" for m in relevant_memories])
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
        reply = ask_llm_with_context(f"{memory_prompt}\n\n{user_input}\n\n–ö–∞–∫ –±—ã —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª?")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
    memory.store(reply, {"type": "response", "source": "telegram"})
    
    await message.reply(reply)