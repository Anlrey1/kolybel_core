# telegram_bot.py ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —ç—Ç–∏ —á–∞—Å—Ç–∏

@dp.message(F.text & ~F.text.startswith("/"))
async def handle_user_message(message: Message):
    user_input = message.text.strip()
    logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}: '{user_input}'")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ø–∞–º—è—Ç—å
    memory.store(document=user_input, metadata={"type": "user_query", "timestamp": datetime.now().isoformat()})
    
    # –ü–æ–¥–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
    template = template_manager.find_best_template(user_input)
    
    if template:
        logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω: {template.title}")
        reply = generate_from_template(
            template.id,
            context={"query": user_input},
            use_training=True
        )
    else:
        # –§–æ–ª–±—ç–∫ –Ω–∞ –ø—Ä—è–º—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        relevant_memories = memory.get_similar("successful response", filter_type="response", n_results=10)
        memory_prompt = "\n".join([f"[–ø–∞–º—è—Ç—å] {m['content']}" for m in relevant_memories])
        
        reply = ask_ll–º_with_context(f"{memory_prompt}\n\n{user_input}\n\n–ö–∞–∫ –±—ã —Ç—ã –æ—Ç–≤–µ—Ç–∏–ª?")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å
    memory.store(reply, {"type": "response", "source": "telegram"})
    
    await message.reply(reply)