#check_code_quality.sh

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ)
if [ -z "$VIRTUAL_ENV" ]; then
    echo "üîß –ê–∫—Ç–∏–≤–∞—Ü–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    source venv/bin/activate || { echo "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ venv"; exit 1; }
fi

# 1. –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
echo "üîç –ó–∞–ø—É—Å–∫ flake8..."
flake8 . --exclude=venv,__pycache__ --max-line-length=120 || exit 1

echo "üîç –ó–∞–ø—É—Å–∫ mypy..."
mypy . --ignore-missing-imports || exit 1

echo "üîç –ó–∞–ø—É—Å–∫ bandit..."
bandit -r . -x venv,__pycache__ || exit 1

echo "üîç –ó–∞–ø—É—Å–∫ pylint..."
pylint **/*.py --ignore=venv || exit 1

# 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
echo "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö..."
safety check --full-report || exit 1

# 3. –ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω—ã—Ö print() –∏ –ª–∏—à–Ω–∏—Ö –ª–æ–≥–æ–≤
echo "üìú –ü–æ–∏—Å–∫ print() –∏ logging.info()..."
grep -rn "print(" . --include="*.py" --exclude-dir={venv,__pycache__} && \
  { echo "‚ùå –ù–∞–π–¥–µ–Ω—ã print() - –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ logging"; exit 1; }

grep -rn "logging\.info" . --include="*.py" --exclude-dir={venv,__pycache__} && \
  { echo "‚ùå –ù–∞–π–¥–µ–Ω—ã logging.info() - –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ logging.warning"; exit 1; }

# 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker (—Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker)
echo "üê≥ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–∏..."
docker scan ollama-https-proxy || exit 1
docker scan cradle-llm || exit 1

echo "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!"